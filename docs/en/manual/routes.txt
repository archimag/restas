.. _manual-routes:

========
 Routes
========

The idea of routes originally appeared in `Ruby On Rails`_ and rapidly became
popular among other web frameworks. Also, `Django`_'s `URLConf`_ is a conceptually
very similar system. Among subsequent developments, http://routes.groovie.org/
(used by `Pylons`_) is probably the most powerful implementation of this idea.

Routes deal with the key problem of web development: matching code to
URL.  For example, which code should respond to processing request to
"/blog/2008/01/08" or "/login" path? Many frameworks use a fixed
dispatch system, e.g. "/A/B/C" means read file "C" in directory "B",
or call method "C" of class "B" in module "A". This works fine until
you decide to reorganize the code, in which case it breaks bookmarks,
and forces you to change the already debugged logic of link generation
inside the site.

Routes offer another approach. You define a URL template and bind it to your code.
If you change your decision about a particular URL, you will just change the
URL template - your code will continue to work fine without having to change
any logic.

cl-routes
=========

Routes are the key concept of `RESTAS`_, and their implementation is based on
`cl-routes`_ library.

Here are several URL templates for `cl-routes`_ library.
::

  /forum/:chapter/:topic/:message
  /forum/archives/:year/:month/:day
  /forum/:chapter/rss

Or joining strings:
::

  /book/:(name)-:(chapter).html
  /:(feed).:(format)

Also there are wildcard parameters (with limitation to using each parameter once
only in each template)
::

  /mydoc/*items
  /*path/rss

The majority of route implementations (including dispatch systems of
`Ruby On Rails`_, `Django`_, and `Pylons`_) store routes in a plain list,
and the search for a matching route is made with brute force up to first match.
Usually, for matching a request and a route they use regular expressions.
So for big sites having hundreds (or even thousands) of routes,
the dispatch system can become a bottleneck, notably lowering overall
performance. `cl-routes`_ compiles all routes in one tree, because
searching in a tree for majority of real sites will be noticeably more
efficient, and instead of regular expressions it uses a lightweight
unification mechanism.

Apart from this, in contrast to above mentioned systems, `cl-routes`_'s
route isn't a string, but an object of class :class:`routes:route`,
for which one can specialize `generic`_ method
:fun:`routes:routes:route-check-conditions`, that allows making arbitrary
checks and comparisons between a route and a request. This possibility
is used by `RESTAS`_ for implementing more flexible dispatching.

During specifying routes conflicts are possible when one and the same URL
matches several templates. In systems with sequential search of matching route
the first match is always picked, and `cl-routes`_ tries to select the
most specific route, for example, the route having more variables,
or having the longest static part. Now there is no accurate description of
the collision resolution algorithm, but usually there is no problem with it:
the system behaviour is quite reasonable and mainly meets intuitive expectations.

Usage
=====

For a route creation `RESTAS`_ uses macro :macro:`restas:define-route`
e.g.:

.. code-block:: common-lisp

  (restas:define-route article ("articles/:author/:item"
                                :method :get
                                :content-type "text/plain")
    (format nil "Author: ~A~Article: ~A" author item))


In other words, we define an URL template and its handler, meanwhile the handler
body have immediate access to the variables defined in the URL template. Embedded handler
by default may return :hs:`string`  or "octets :hs:`array`", or integer number
(which will be interpreted as a code of request status), or :hs:`pathname`
(in this case :fun:`hunchentoot:handle-static-file`) is called, which, contrary
to Ruby- and Python-based systems, works fast enough and usually there is
no need for additional servers for static content, such as the `nginx`_ server.

When you define a route with :fun:`restas:define-route` you need to specify
:hs:`symbol` (in cited example it is 'article), which will became the route name.
Firstly, it gives you the possibility to redefine the route (including the URL template,
just keep the same name for it) at any moment you want, just send the code
to REPL (for example, with M-C-x in `SLIME`_). Secondly, it lets you use
this :hs:`symbol` for URL generation:

.. code-block:: common-lisp

  (restas:genurl 'article
                 :author "archimag"
                 :item "introduction-to-routes")

or for a redirect:

.. code-block:: common-lisp

  (restas:redirect 'article
                   :author "archimag"
                   :item "introduction-to-routes")

For one and the same URL template you can create several routes by setting
additional requirements to them.

HTTP method type requirement
----------------------------

This requirement is specified with :method parameter (:get by default) of
macro :macro:`restas:define-route`, for example:

.. code-block:: common-lisp

  (restas:define-route view-page (":page")
     ...)

  (restas:define-route change-page (":page" :method :post)
     ...)

Here routes view-page and change-page serve one and the same URL,
but view-page is in charge of GET requests, and change-page
processes POST requests.

URL parameter control
---------------------

Often there is a need to put a restriction to URL template parameters, e.g.
a restriction of type, or a need to transform them from a string representation to
some objects. For this you can use :parse-vars parameter of macro
:macro:`restas:define-route`, for example:

.. code-block:: common-lisp

  (restas:define-route myroute ("/foo/:bar/:id/:page"
                                :parse-vars (list :bar (lambda (str)
                                                           (check-bar str))
                                                  :id #'parse-integer))
    ...)

Here id parameter is parsed as integer, bar is checked with aid of
#'check-bar function, and page parameter is left as is. If a parse function
returns :hs:`NIL` or generates an error, then the route is considered
as not meeting the condition and is skipped. In the case of success
route body has the access to already parsed parameter value,
as returned by specified function.

.. _manual-routes-requirement:

Arbitrary restriction
---------------------

With :requirement parameter of macro :macro:`restas:define-route`
you can specify an arbitrary function to be called when the route is
checked. If it returns :hs:`NIL` then the route is treated as inappropriate.

For example, `restas-wiki`_ for processing of editing form of wiki page
uses the following code:

.. code-block:: common-lisp

  (define-route edit-wiki-page/preview ("edit/:page"
                                        :method :post
                                        :requirement (lambda () (hunchentoot:post-parameter "preview")))
    ...)

  (define-route edit-wiki-page/cancel ("edit/:page"
                                       :method :post
                                       :requirement (lambda () (hunchentoot:post-parameter "cancel")))
    ...)

  (define-route edit-wiki-page/save ("edit/:page"
                                     :method :post
                                     :requirement (lambda () (hunchentoot:post-parameter "save")))
    ...)

Here the routes edit-wiki-page/preview, edit-wiki-page/cancel, and edit-wiki-page/save
reply for pressing form buttons Preview, Cancel, and Save accordingly.

.. _RESTAS: http://restas.lisper.ru/
.. _SLIME: http://common-lisp.net/project/slime/
.. _cl-routes: http://github.com/archimag/cl-routes
.. _restas-wiki: http://github.com/archimag/restas-wiki
.. _generic: http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_g.htm#generic_function
.. _Ruby On Rails: http://rubyonrails.org/
.. _Pylons: http://pylonshq.com/
.. _Django: http://www.djangoproject.com/
.. _URLConf: http://docs.djangoproject.com/en/dev/topics/http/urls/
.. _nginx: http://sysoev.ru/nginx/


